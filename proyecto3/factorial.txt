atoi: 
    push    ebx 
    push    ecx
    push    edx
    push    esi
    mov     esi, eax
    mov     eax, 0
    mov     ecx, 0
.multiplyLoop: 
    xor     ebx, ebx
    mov     bl, [esi+ecx]
    cmp     bl, 48
    jl      .finished
    cmp     bl, 57
    jg      .finished
    sub     bl, 48
    add     eax, ebx
    mov     ebx, 10
    mul     ebx
    inc     ecx
    jmp     .multiplyLoop
.finished:
    cmp     ecx, 0
    je      .restore
    mov     ebx, 10
    div     ebx
.restore:
    pop     esi
    pop     edx
    pop     ecx
    pop     ebx
    ret
sprintLF:
    call    sprint
    push    eax
    mov     eax, 0Ah
    push    eax
    mov     eax, esp
    call    sprint
    pop     eax
    pop     eax
    ret
sprint:
    push    edx
    push    ecx
    push    ebx
    push    eax
    call    slen
    mov     edx, eax
    pop     eax
    mov     ecx, eax
    mov     ebx, 1
    mov     eax, 4
    int     80h
    pop     ebx
    pop     ecx
    pop     edx
    ret
slen:
    push    ebx
    mov     ebx, eax
nextchar:
    cmp     byte [eax], 0
    jz      finished
    inc     eax
    jmp     nextchar
finished:
    sub     eax, ebx
    pop     ebx
    ret
quit:
    mov     ebx, 0
    mov     eax, 1
    int     80h
    ret
SECTION .text
global _start
_start:
    mov eax, 0
    mov ebx, 1
    mov ecx, 61
    call factorial
factorial:
    mul ebx
    inc eax
    cmp eax, ecx
    jne factorial
    mov eax, ebx
    add    eax, 48
    push eax
    mov eax, esp
    call sprintLF
    pop eax
call quit
SECTION .data
msg1        db      'Ingresar cantidad de llamadas: ', 0h
SECTION .bss
sinput:   resb 255
