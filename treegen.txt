(program class Program { (declaration (structDeclaration struct A { (varDeclaration (varType int) a ;) })) (declaration (structDeclaration struct B { (varDeclaration (varType int) b [ 5 ] ;) (varDeclaration (varType struct A) c ;) })) (declaration (methodDeclaration (methodType int) ReturnNumber ( ) (block { (statement return (expression (location z . (location a))) ;) }))) (declaration (varDeclaration (varType struct A) y ;)) (declaration (varDeclaration (varType struct A) z ;)) (declaration (varDeclaration (varType struct B) m ;)) (declaration (methodDeclaration (methodType void) main ( ) (block { (statement (varDeclaration (varType struct B) y [ 5 ] ;)) (statement (varDeclaration (varType int) i ;)) (statement (varDeclaration (varType int) j ;)) (statement (varDeclaration (varType int) k ;)) (statement (location i) = (expression (literal (int_literal 0)))) (statement ;) (statement (location j) = (expression (literal (int_literal 0)))) (statement ;) (statement (location z . (location a)) = (expression (literal (int_literal 3)))) (statement ;) (statement while ( (expression (expression (location i)) (opcond (rel_op <=)) (expression (literal (int_literal 10)))) ) (block { (statement (location y [ (expression (location j)) ] . (location b [ (expression (literal (int_literal 0))) ])) = (expression (methodCall InputInt ( )))) (statement ;) (statement if ( (expression (expression (location y [ (expression (location j)) ] . (location b [ (expression (literal (int_literal 0))) ]))) (opcond (eq_op ==)) (expression (literal (int_literal 5)))) ) (block { (statement (location y [ (expression (location j)) ] . (location b [ (expression (literal (int_literal 0))) ])) = (expression (location z . (location a)))) (statement ;) (statement (location k) = (expression (location factorial))) (statement (expression ( (expression (methodCall ReturnNumber ( ))) )) ;) (statement (methodCall OutputInt ( (arg (expression (location k))) )) ;) })) (statement (location y [ (expression (location j)) ] . (location c . (location a))) = (expression (location factorial))) (statement (expression ( (expression (location y [ (expression (location j)) ] . (location b [ (expression (literal (int_literal 0))) ]))) )) ;) (statement (methodCall OutputInt ( (arg (expression (location y [ (expression (location j)) ] . (location c . (location a))))) )) ;) (statement (location i) = (expression (expression (location i)) + (expression (literal (int_literal 1))))) (statement ;) })) }))) (declaration (methodDeclaration (methodType void) error ( ) (block { (statement (location m . (location b [ (expression (literal (int_literal 10))) ])) = (expression (literal (int_literal 5)))) (statement ;) (statement (location b . (location c . (location a))) = (expression (location c))) (statement ;) (statement if ( (expression (literal (int_literal 1))) ) (block { (statement (location a) = (expression (literal (int_literal 4)))) (statement ;) }) else (block { (statement (location m) = (expression (literal (int_literal 3)))) (statement ;) })) (statement ;) (statement (varDeclaration (varType char) c ;)) (statement (location c) = (expression (location factorial))) (statement (expression ( (expression (location c)) )) ;) (statement return (expression (location m)) ;) }))) (declaration (methodDeclaration (methodType int) factorial ( (parameter (parameterType int) n) ) (block { (statement if ( (expression (expression (location n)) (opcond (eq_op ==)) (expression (literal (int_literal 0)))) ) (block { (statement return (expression (literal (int_literal 1))) ;) }) else (block { (statement return (expression (expression (location n)) * (expression (methodCall factorial ( (arg (expression (expression (location n)) - (expression (literal (int_literal 1))))) )))) ;) })) }))) (declaration (methodDeclaration (methodType void) OutputInt ( (parameter (parameterType int) n) ) (block { }))) (declaration (methodDeclaration (methodType int) InputInt ( ) (block { (statement return (expression (literal (int_literal 0))) ;) }))) })