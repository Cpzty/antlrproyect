2020-09-06 20:33:02:881 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Decaf (RULES (RULE compileUnit (BLOCK (ALT program EOF))) (RULE program (BLOCK (ALT 'class' 'Program' '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration))) (RULE structDeclaration (BLOCK (ALT 'struct' ID '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varDeclaration (BLOCK (ALT varType ID ';') (ALT varType ID '[' NUM ']' ';'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' ID) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT methodType ID '(' (* (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE methodType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'void'))) (RULE parameter (BLOCK (ALT parameterType ID) (ALT parameterType ID '[' ']'))) (RULE parameterType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean'))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))) (ALT 'while' '(' expression ')' block) (ALT 'return' (? (BLOCK (ALT expression))) ';') (ALT methodCall ';') (ALT block) (ALT location '=' expression) (ALT (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT (BLOCK (ALT ID) (ALT ID '[' expression ']')) (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT literal) (ALT '(' expression ')') (ALT (= left_num int_literal)) (ALT ID (= op (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (= right_num int_literal)) (ALT ID) (ALT (= left_num int_literal)) (ALT ID (= op (BLOCK (ALT '+') (ALT '-'))) (= right_num int_literal)) (ALT ID) (ALT (= left_rel int_literal)) (ALT ID rel_op (= right_rel int_literal)) (ALT ID) (ALT (= left_num int_literal)) (ALT location eq_op (= right_num int_literal)) (ALT location) (ALT (= left_bool bool_literal)) (ALT ID eq_op (= right_bool bool_literal)) (ALT ID) (ALT (= left_char char_literal)) (ALT ID eq_op (= right_char char_literal)) (ALT ID) (ALT (= left_bool bool_literal)) (ALT ID cond_op (= right_bool bool_literal)) (ALT ID) (ALT '-' expression) (ALT '!' expression))) (RULE methodCall (BLOCK (ALT ID '(' ')') (ALT ID '(' arg1 ')'))) (RULE arg1 (BLOCK (ALT arg2) (ALT EPSILON))) (RULE arg2 (BLOCK (ALT (BLOCK (ALT arg)) (* (BLOCK (ALT ',' arg)))))) (RULE arg (BLOCK (ALT expression))) (RULE arith_op1 (BLOCK (ALT '*') (ALT '/') (ALT '%'))) (RULE arith_op2 (BLOCK (ALT '+') (ALT '-'))) (RULE opcond (BLOCK (ALT rel_op) (ALT eq_op))) (RULE rel_op (BLOCK (ALT '<') (ALT '>') (ALT '<=') (ALT '>='))) (RULE eq_op (BLOCK (ALT '==') (ALT '!='))) (RULE cond_op (BLOCK (ALT '&&') (ALT '||'))) (RULE literal (BLOCK (ALT int_literal) (ALT char_literal) (ALT bool_literal))) (RULE int_literal (BLOCK (ALT NUM))) (RULE char_literal (BLOCK (ALT '"' CHAR '"'))) (RULE bool_literal (BLOCK (ALT 'true') (ALT 'false'))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET '\r' '\n')))))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n\f | ' '| '\r' | '\n' | '\t'])))) (LEXER_ACTION_CALL channel HIDDEN))))))
2020-09-06 20:33:02:898 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Decaf (RULES (RULE compileUnit (BLOCK (ALT program EOF))) (RULE program (BLOCK (ALT 'class' 'Program' '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration))) (RULE structDeclaration (BLOCK (ALT 'struct' ID '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varDeclaration (BLOCK (ALT varType ID ';') (ALT varType ID '[' NUM ']' ';'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' ID) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT methodType ID '(' (* (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE methodType (BLOCK (ALT (SET 'int' 'char' 'boolean' 'void')))) (RULE parameter (BLOCK (ALT parameterType ID) (ALT parameterType ID '[' ']'))) (RULE parameterType (BLOCK (ALT (SET 'int' 'char' 'boolean')))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))) (ALT 'while' '(' expression ')' block) (ALT 'return' (? (BLOCK (ALT expression))) ';') (ALT methodCall ';') (ALT block) (ALT location '=' expression) (ALT (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT (BLOCK (ALT ID) (ALT ID '[' expression ']')) (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT literal) (ALT '(' expression ')') (ALT (= left_num int_literal)) (ALT ID (= op (SET '*' '/' '%')) (= right_num int_literal)) (ALT ID) (ALT (= left_num int_literal)) (ALT ID (= op (SET '+' '-')) (= right_num int_literal)) (ALT ID) (ALT (= left_rel int_literal)) (ALT ID rel_op (= right_rel int_literal)) (ALT ID) (ALT (= left_num int_literal)) (ALT location eq_op (= right_num int_literal)) (ALT location) (ALT (= left_bool bool_literal)) (ALT ID eq_op (= right_bool bool_literal)) (ALT ID) (ALT (= left_char char_literal)) (ALT ID eq_op (= right_char char_literal)) (ALT ID) (ALT (= left_bool bool_literal)) (ALT ID cond_op (= right_bool bool_literal)) (ALT ID) (ALT '-' expression) (ALT '!' expression))) (RULE methodCall (BLOCK (ALT ID '(' ')') (ALT ID '(' arg1 ')'))) (RULE arg1 (BLOCK (ALT arg2) (ALT EPSILON))) (RULE arg2 (BLOCK (ALT (BLOCK (ALT arg)) (* (BLOCK (ALT ',' arg)))))) (RULE arg (BLOCK (ALT expression))) (RULE arith_op1 (BLOCK (ALT (SET '*' '/' '%')))) (RULE arith_op2 (BLOCK (ALT (SET '+' '-')))) (RULE opcond (BLOCK (ALT rel_op) (ALT eq_op))) (RULE rel_op (BLOCK (ALT (SET '<' '>' '<=' '>=')))) (RULE eq_op (BLOCK (ALT (SET '==' '!=')))) (RULE cond_op (BLOCK (ALT (SET '&&' '||')))) (RULE literal (BLOCK (ALT int_literal) (ALT char_literal) (ALT bool_literal))) (RULE int_literal (BLOCK (ALT NUM))) (RULE char_literal (BLOCK (ALT '"' CHAR '"'))) (RULE bool_literal (BLOCK (ALT (SET 'true' 'false')))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET '\r' '\n')))))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n\f | ' '| '\r' | '\n' | '\t'])))) (LEXER_ACTION_CALL channel HIDDEN))))))
2020-09-06 20:33:02:914 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Decaf (RULES (RULE compileUnit (BLOCK (ALT program EOF))) (RULE program (BLOCK (ALT 'class' 'Program' '{' (* (BLOCK (ALT declaration))) '}'))) (RULE declaration (BLOCK (ALT structDeclaration) (ALT varDeclaration) (ALT methodDeclaration))) (RULE structDeclaration (BLOCK (ALT 'struct' ID '{' (* (BLOCK (ALT varDeclaration))) '}'))) (RULE varDeclaration (BLOCK (ALT varType ID ';') (ALT varType ID '[' NUM ']' ';'))) (RULE varType (BLOCK (ALT 'int') (ALT 'char') (ALT 'boolean') (ALT 'struct' ID) (ALT structDeclaration) (ALT 'void'))) (RULE methodDeclaration (BLOCK (ALT methodType ID '(' (* (BLOCK (ALT parameter (* (BLOCK (ALT ',' parameter)))))) ')' block))) (RULE methodType (BLOCK (ALT (SET 'int' 'char' 'boolean' 'void')))) (RULE parameter (BLOCK (ALT parameterType ID) (ALT parameterType ID '[' ']'))) (RULE parameterType (BLOCK (ALT (SET 'int' 'char' 'boolean')))) (RULE block (BLOCK (ALT '{' (* (BLOCK (ALT varDeclaration))) (* (BLOCK (ALT statement))) '}'))) (RULE statement (BLOCK (ALT 'if' '(' expression ')' block (? (BLOCK (ALT 'else' block)))) (ALT 'while' '(' expression ')' block) (ALT 'return' (? (BLOCK (ALT expression))) ';') (ALT methodCall ';') (ALT block) (ALT location '=' expression) (ALT (? (BLOCK (ALT expression))) ';'))) (RULE location (BLOCK (ALT (BLOCK (ALT ID) (ALT ID '[' expression ']')) (? (BLOCK (ALT '.' location)))))) (RULE expression (BLOCK (ALT location) (ALT methodCall) (ALT literal) (ALT '(' expression ')') (ALT (= left_num int_literal)) (ALT ID (= op (SET '*' '/' '%')) (= right_num int_literal)) (ALT ID) (ALT (= left_num int_literal)) (ALT ID (= op (SET '+' '-')) (= right_num int_literal)) (ALT ID) (ALT (= left_rel int_literal)) (ALT ID rel_op (= right_rel int_literal)) (ALT ID) (ALT (= left_num int_literal)) (ALT location eq_op (= right_num int_literal)) (ALT location) (ALT (= left_bool bool_literal)) (ALT ID eq_op (= right_bool bool_literal)) (ALT ID) (ALT (= left_char char_literal)) (ALT ID eq_op (= right_char char_literal)) (ALT ID) (ALT (= left_bool bool_literal)) (ALT ID cond_op (= right_bool bool_literal)) (ALT ID) (ALT '-' expression) (ALT '!' expression))) (RULE methodCall (BLOCK (ALT ID '(' ')') (ALT ID '(' arg1 ')'))) (RULE arg1 (BLOCK (ALT arg2) (ALT EPSILON))) (RULE arg2 (BLOCK (ALT (BLOCK (ALT arg)) (* (BLOCK (ALT ',' arg)))))) (RULE arg (BLOCK (ALT expression))) (RULE arith_op1 (BLOCK (ALT (SET '*' '/' '%')))) (RULE arith_op2 (BLOCK (ALT (SET '+' '-')))) (RULE opcond (BLOCK (ALT rel_op) (ALT eq_op))) (RULE rel_op (BLOCK (ALT (SET '<' '>' '<=' '>=')))) (RULE eq_op (BLOCK (ALT (SET '==' '!=')))) (RULE cond_op (BLOCK (ALT (SET '&&' '||')))) (RULE literal (BLOCK (ALT int_literal) (ALT char_literal) (ALT bool_literal))) (RULE int_literal (BLOCK (ALT NUM))) (RULE char_literal (BLOCK (ALT '"' CHAR '"'))) (RULE bool_literal (BLOCK (ALT (SET 'true' 'false'))))))
2020-09-06 20:33:02:914 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR DecafLexer (RULES (RULE T__0 (BLOCK (ALT 'class'))) (RULE T__1 (BLOCK (ALT 'Program'))) (RULE T__2 (BLOCK (ALT '{'))) (RULE T__3 (BLOCK (ALT '}'))) (RULE T__4 (BLOCK (ALT 'struct'))) (RULE T__5 (BLOCK (ALT ';'))) (RULE T__6 (BLOCK (ALT '['))) (RULE T__7 (BLOCK (ALT ']'))) (RULE T__8 (BLOCK (ALT 'int'))) (RULE T__9 (BLOCK (ALT 'char'))) (RULE T__10 (BLOCK (ALT 'boolean'))) (RULE T__11 (BLOCK (ALT 'void'))) (RULE T__12 (BLOCK (ALT '('))) (RULE T__13 (BLOCK (ALT ','))) (RULE T__14 (BLOCK (ALT ')'))) (RULE T__15 (BLOCK (ALT 'if'))) (RULE T__16 (BLOCK (ALT 'else'))) (RULE T__17 (BLOCK (ALT 'while'))) (RULE T__18 (BLOCK (ALT 'return'))) (RULE T__19 (BLOCK (ALT '='))) (RULE T__20 (BLOCK (ALT '.'))) (RULE T__21 (BLOCK (ALT '*'))) (RULE T__22 (BLOCK (ALT '/'))) (RULE T__23 (BLOCK (ALT '%'))) (RULE T__24 (BLOCK (ALT '+'))) (RULE T__25 (BLOCK (ALT '-'))) (RULE T__26 (BLOCK (ALT '!'))) (RULE T__27 (BLOCK (ALT '<'))) (RULE T__28 (BLOCK (ALT '>'))) (RULE T__29 (BLOCK (ALT '<='))) (RULE T__30 (BLOCK (ALT '>='))) (RULE T__31 (BLOCK (ALT '=='))) (RULE T__32 (BLOCK (ALT '!='))) (RULE T__33 (BLOCK (ALT '&&'))) (RULE T__34 (BLOCK (ALT '||'))) (RULE T__35 (BLOCK (ALT '"'))) (RULE T__36 (BLOCK (ALT 'true'))) (RULE T__37 (BLOCK (ALT 'false'))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET '\r' '\n')))))) (LEXER_ACTION_CALL channel HIDDEN)))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z] (* (BLOCK (ALT [a-zA-Z0-9])))))))) (RULE NUM (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE CHAR (BLOCK (ALT [a-zA-Z]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n\f | ' '| '\r' | '\n' | '\t'])))) (LEXER_ACTION_CALL channel HIDDEN))))))
2020-09-06 20:33:03:083 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, COMMENT=39, ID=40, NUM=41, CHAR=42, WS=43}
2020-09-06 20:33:03:083 semantics LogManager.java:25 strings={'class'=1, 'Program'=2, '{'=3, '}'=4, 'struct'=5, ';'=6, '['=7, ']'=8, 'int'=9, 'char'=10, 'boolean'=11, 'void'=12, '('=13, ','=14, ')'=15, 'if'=16, 'else'=17, 'while'=18, 'return'=19, '='=20, '.'=21, '*'=22, '/'=23, '%'=24, '+'=25, '-'=26, '!'=27, '<'=28, '>'=29, '<='=30, '>='=31, '=='=32, '!='=33, '&&'=34, '||'=35, '"'=36, 'true'=37, 'false'=38}
2020-09-06 20:33:03:092 LL1 LogManager.java:25 
DECISION 0 in rule program
2020-09-06 20:33:03:097 LL1 LogManager.java:25 look=[{5, 9..12}, 4]
2020-09-06 20:33:03:097 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:097 LL1 LogManager.java:25 
DECISION 1 in rule declaration
2020-09-06 20:33:03:097 LL1 LogManager.java:25 look=[5, {5, 9..12}, {9..12}]
2020-09-06 20:33:03:097 LL1 LogManager.java:25 LL(1)? false
2020-09-06 20:33:03:097 LL1 LogManager.java:25 
DECISION 2 in rule structDeclaration
2020-09-06 20:33:03:097 LL1 LogManager.java:25 look=[{5, 9..12}, 4]
2020-09-06 20:33:03:097 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:097 LL1 LogManager.java:25 
DECISION 3 in rule varDeclaration
2020-09-06 20:33:03:097 LL1 LogManager.java:25 look=[{5, 9..12}, {5, 9..12}]
2020-09-06 20:33:03:097 LL1 LogManager.java:25 LL(1)? false
2020-09-06 20:33:03:097 LL1 LogManager.java:25 
DECISION 4 in rule varType
2020-09-06 20:33:03:097 LL1 LogManager.java:25 look=[9, 10, 11, 5, 5, 12]
2020-09-06 20:33:03:097 LL1 LogManager.java:25 LL(1)? false
2020-09-06 20:33:03:097 LL1 LogManager.java:25 
DECISION 5 in rule methodDeclaration
2020-09-06 20:33:03:097 LL1 LogManager.java:25 look=[14, {9..11, 15}]
2020-09-06 20:33:03:097 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:097 LL1 LogManager.java:25 
DECISION 6 in rule methodDeclaration
2020-09-06 20:33:03:097 LL1 LogManager.java:25 look=[{9..11}, 15]
2020-09-06 20:33:03:097 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:097 LL1 LogManager.java:25 
DECISION 7 in rule parameter
2020-09-06 20:33:03:097 LL1 LogManager.java:25 look=[{9..11}, {9..11}]
2020-09-06 20:33:03:097 LL1 LogManager.java:25 LL(1)? false
2020-09-06 20:33:03:097 LL1 LogManager.java:25 
DECISION 8 in rule block
2020-09-06 20:33:03:098 LL1 LogManager.java:25 look=[{5, 9..12}, {3..4, 6, 13, 16, 18..19, 26..27, 36..38, 40..41}]
2020-09-06 20:33:03:098 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:098 LL1 LogManager.java:25 
DECISION 9 in rule block
2020-09-06 20:33:03:098 LL1 LogManager.java:25 look=[{3, 6, 13, 16, 18..19, 26..27, 36..38, 40..41}, 4]
2020-09-06 20:33:03:098 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:098 LL1 LogManager.java:25 
DECISION 10 in rule statement
2020-09-06 20:33:03:098 LL1 LogManager.java:25 look=[17, {3..4, 6, 13, 16, 18..19, 26..27, 36..38, 40..41}]
2020-09-06 20:33:03:098 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:098 LL1 LogManager.java:25 
DECISION 11 in rule statement
2020-09-06 20:33:03:098 LL1 LogManager.java:25 look=[{13, 26..27, 36..38, 40..41}, 6]
2020-09-06 20:33:03:098 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:098 LL1 LogManager.java:25 
DECISION 12 in rule statement
2020-09-06 20:33:03:098 LL1 LogManager.java:25 look=[{13, 26..27, 36..38, 40..41}, 6]
2020-09-06 20:33:03:098 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:098 LL1 LogManager.java:25 
DECISION 13 in rule statement
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[16, 18, 19, 40, 3, 40, {6, 13, 26..27, 36..38, 40..41}]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? false
2020-09-06 20:33:03:099 LL1 LogManager.java:25 
DECISION 14 in rule location
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[40, 40]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? false
2020-09-06 20:33:03:099 LL1 LogManager.java:25 
DECISION 15 in rule location
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[21, {3..4, 6, 8, 13..16, 18..20, 26..27, 32..33, 36..38, 40..41}]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:099 LL1 LogManager.java:25 
DECISION 16 in rule expression
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[40, 40, {36..38, 41}, 13, 41, 40, 40, 41, 40, 40, 41, 40, 40, 41, 40, 40, {37..38}, 40, 40, 36, 40, 40, {37..38}, 40, 40, 26, 27]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? false
2020-09-06 20:33:03:099 LL1 LogManager.java:25 
DECISION 17 in rule methodCall
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[40, 40]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? false
2020-09-06 20:33:03:099 LL1 LogManager.java:25 
DECISION 18 in rule arg1
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[{13, 26..27, 36..38, 40..41}, 15]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:099 LL1 LogManager.java:25 
DECISION 19 in rule arg2
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[14, 15]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:099 LL1 LogManager.java:25 
DECISION 20 in rule opcond
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[{28..31}, {32..33}]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? true
2020-09-06 20:33:03:099 LL1 LogManager.java:25 
DECISION 21 in rule literal
2020-09-06 20:33:03:099 LL1 LogManager.java:25 look=[41, 36, {37..38}]
2020-09-06 20:33:03:099 LL1 LogManager.java:25 LL(1)? true
